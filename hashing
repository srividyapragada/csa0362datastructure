#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Method 1: Division Hashing
int divisionHash(int key) {
    return key % TABLE_SIZE;
}

// Method 2: Multiplication Hashing
int multiplicationHash(int key) {
    float A = 0.6180339887; // A = (sqrt(5) - 1) / 2
    return (int)(TABLE_SIZE * ((key * A) - (int)(key * A)));
}

struct HashNode {
    int data;
    int isOccupied;
};

// Method 3: Linear Probing (Handling Collisions)
void insertLinearProbing(struct HashNode hashTable[], int key) {
    int index = divisionHash(key);
    while (hashTable[index].isOccupied) {
        index = (index + 1) % TABLE_SIZE;
    }
    hashTable[index].data = key;
    hashTable[index].isOccupied = 1;
}

int main() {
    int input[] = {10, 21, 32, 43, 54, 65, 76, 87, 98, 109};
    int numElements = sizeof(input) / sizeof(input[0]);

    // Initialize hash table
    struct HashNode hashTable[TABLE_SIZE];
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i].isOccupied = 0;
    }

    // Division Hashing
    printf("Division Hashing:\n");
    for (int i = 0; i < numElements; i++) {
        int key = input[i];
        int index = divisionHash(key);
        printf("Inserting %d at index %d\n", key, index);
        hashTable[index].data = key;
        hashTable[index].isOccupied = 1;
    }

    // Multiplication Hashing
    printf("\nMultiplication Hashing:\n");
    for (int i = 0; i < numElements; i++) {
        int key = input[i];
        int index = multiplicationHash(key);
        printf("Inserting %d at index %d\n", key, index);
        hashTable[index].data = key;
        hashTable[index].isOccupied = 1;
    }

    // Linear Probing (Handling Collisions)
    printf("\nLinear Probing (Handling Collisions):\n");
    for (int i = 0; i < numElements; i++) {
        int key = input[i];
        insertLinearProbing(hashTable, key);
        printf("Inserting %d\n", key);
    }

    // Print hash table
    printf("\nFinal Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable[i].isOccupied) {
            printf("Index %d: %d\n", i, hashTable[i].data);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
    
    return 0;
}
