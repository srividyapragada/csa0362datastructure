#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

// Define a queue structure
struct Queue {
    int arr[MAX_SIZE];
    int front, rear;
};

// Initialize a queue
void initializeQueue(struct Queue* queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Check if a queue is empty
int isQueueEmpty(struct Queue* queue) {
    return (queue->front == -1 && queue->rear == -1);
}

// Enqueue an element into the queue
void enqueue(struct Queue* queue, int value) {
    if (queue->rear == MAX_SIZE - 1) {
        printf("Queue is full\n");
        return;
    }
    if (isQueueEmpty(queue)) {
        queue->front = 0;
    }
    queue->rear++;
    queue->arr[queue->rear] = value;
}
// Dequeue an element from the queue
int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue)) {
        printf("Queue is empty\n");
        return -1;
    }
    int value = queue->arr[queue->front];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front++;
    }
    return value;
}

// Push an element onto the stack using two queues
void push(struct Queue* q1, struct Queue* q2, int value) {
    // Move all elements from q1 to q2
    while (!isQueueEmpty(q1)) {
        enqueue(q2, dequeue(q1));
    }

    // Enqueue the new element into q1
    enqueue(q1, value);

    // Move elements back from q2 to q1
    while (!isQueueEmpty(q2)) {
        enqueue(q1, dequeue(q2));
    }
}

// Pop an element from the stack
int pop(struct Queue* q1) {
if (isQueueEmpty(q1)) {
        printf("Stack is empty\n");
        return -1;
    }
    return dequeue(q1);
}

int main() {
    struct Queue q1, q2;
    initializeQueue(&q1);
    initializeQueue(&q2);

    push(&q1, &q2, 3);
    push(&q1, &q2, 5);
    push(&q1, &q2, 7);

    printf("Popped element: %d\n", pop(&q1));
    printf("Popped element: %d\n", pop(&q1));
    printf("Popped element: %d\n", pop(&q1));
    
    return 0;
}
