#include <stdio.h>
#include <stdlib.h>

// Definition of a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to find the length of a linked list
int getLength(struct Node* head) {
    int length = 0;
    struct Node* current = head;
    
    while (current != NULL) {
        length++;
        current = current->next;
    }
    
    return length;
}

// Function to find the intersection point of two linked lists
struct Node* findIntersection(struct Node* list1, struct Node* list2) {
    int len1 = getLength(list1);
    int len2 = getLength(list2);

    // Move the longer list's pointer ahead by the difference in lengths
    while (len1 > len2) {
        list1 = list1->next;
        len1--;
    }
while (len2 > len1) {
        list2 = list2->next;
        len2--;
    }

    // Move both pointers one step at a time until they meet
    while (list1 != NULL && list2 != NULL) {
        if (list1 == list2) {
            return list1; // Intersection point found
        }
        list1 = list1->next;
        list2 = list2->next;
    }

    return NULL; // No intersection point found
}

int main() {
    // Creating linked lists with an intersection point
    struct Node* commonNode = (struct Node*)malloc(sizeof(struct Node));
    commonNode->data = 20;
    
    struct Node* list1 = (struct Node*)malloc(sizeof(struct Node));
    list1->data = 10;
    list1->next = commonNode;

    struct Node* list2 = (struct Node*)malloc(sizeof(struct Node));
    list2->data = 5;
    list2->next = commonNode;
    
     commonNode->next = NULL; // Tail of the lists

    // Find and print the intersection point
    struct Node* intersection = findIntersection(list1, list2);
    if (intersection != NULL) {
        printf("Intersection point data: %d\n", intersection->data);
    } else {
        printf("No intersection point found.\n");
    }

    // Free allocated memory
    free(list1);
    free(list2);
    free(commonNode);
    
    return 0;
}
