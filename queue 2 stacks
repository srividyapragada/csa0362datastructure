#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

// Define a stack structure
struct Stack {
    int arr[MAX_SIZE];
    int top;
};

// Initialize a stack
void initializeStack(struct Stack* stack) {
    stack->top = -1;
}

// Check if a stack is empty
int isStackEmpty(struct Stack* stack) {
    return (stack->top == -1);
}

// Push an element onto the stack
void push(struct Stack* stack, int value) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack is full\n");
        return;
    }
    stack->arr[++stack->top] = value;
}

// Pop an element from the stack
int pop(struct Stack* stack) {
    if (isStackEmpty(stack)) {
        printf("Stack is empty\n");
return -1;
    }
    return stack->arr[stack->top--];
}

// Define a queue structure using two stacks
struct Queue {
    struct Stack stack1;
    struct Stack stack2;
};

// Initialize a queue
void initializeQueue(struct Queue* queue) {
    initializeStack(&queue->stack1);
    initializeStack(&queue->stack2);
}

// Enqueue an element into the queue
void enqueue(struct Queue* queue, int value) {
    push(&queue->stack1, value);
}

// Dequeue an element from the queue
int dequeue(struct Queue* queue) {
    if (isStackEmpty(&queue->stack1) && isStackEmpty(&queue->stack2)) {
        printf("Queue is empty\n");
        return -1;
    }

    // Transfer elements from stack1 to stack2 (in reverse order)
    if (isStackEmpty(&queue->stack2)) {
        while (!isStackEmpty(&queue->stack1)) {
             push(&queue->stack2, pop(&queue->stack1));
        }
    }

    // Pop from stack2 (which contains the front element)
    return pop(&queue->stack2);
}

int main() {
    struct Queue queue;
    initializeQueue(&queue);

    enqueue(&queue, 3);
    enqueue(&queue, 5);
    enqueue(&queue, 7);

    printf("Dequeued element: %d\n", dequeue(&queue));
    printf("Dequeued element: %d\n", dequeue(&queue));
    printf("Dequeued element: %d\n", dequeue(&queue));
    
    return 0;
}
