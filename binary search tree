#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node *createNode(int data) {
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

struct Node *insert(struct Node *root, int data) {
    if (root == NULL)
        return createNode(data);

    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);

    return root;
}

struct Node *search(struct Node *root, int key) {
    if (root == NULL || root->data == key)
        return root;

    if (key < root->data)
        return search(root->left, key);
    else
        return search(root->right, key);
}

struct Node *findMin(struct Node *root) {
    if (root == NULL)
        return NULL;
    
    while (root->left != NULL)
        root = root->left;
    
    return root;
}

struct Node *findMax(struct Node *root) {
    if (root == NULL)
        return NULL;
    
    while (root->right != NULL)
        root = root->right;
    
    return root;
}

int main() {
    struct Node *root = NULL;

    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    int key = 60;
    struct Node *searchResult = search(root, key);
    if (searchResult)
        printf("Element %d found in the tree.\n", key);
    else
        printf("Element %d not found in the tree.\n", key);

    struct Node *minNode = findMin(root);
    if (minNode)
        printf("Minimum element in the tree: %d\n", minNode->data);

    struct Node *maxNode = findMax(root);
    if (maxNode)
        printf("Maximum element in the tree: %d\n", maxNode->data);
        
        return 0;
}
