#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node *createNode(int data) {
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

struct Node *insert(struct Node *root, int data) {
    if (root == NULL)
        return createNode(data);

    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);

    return root;
}

void inOrderTraversal(struct Node *root, int *count, int k, int *result) {
    if (root == NULL || *count >= k)
        return;

    inOrderTraversal(root->left, count, k, result);
    
    (*count)++;
    if (*count == k) {
        *result = root->data;
        return;
    }

    inOrderTraversal(root->right, count, k, result);
}

int kthSmallest(struct Node *root, int k) {
    int count = 0;
    int result = -1;
    inOrderTraversal(root, &count, k, &result);
    return result;
}

int main() {
    struct Node *root = NULL;

    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    int k = 3;
    int kthMin = kthSmallest(root, k);
    printf("The %dth smallest value in the BST is: %d\n", k, kthMin);
    
    return 0;
}
